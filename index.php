<?php
/*
 * Simple Album
 * Copyright (c) 2012 Alex Duchesne
 *
 * Permission to use, copy, modify, and/or distribute this software for any purpose
 * with or without fee is hereby granted, provided that the above copyright notice
 * and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH REGARD TO
 * THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.
 * IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
 * OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 */

define('START_TIME', microtime(true));

define('HTTP_HOST', strtolower($_SERVER['HTTP_HOST'] ?? $_SERVER['SERVER_NAME']));
define('HTTP_URI', cleanpath(strtok($_SERVER['REQUEST_URI'], '?')));

$config = [
    'title' => basename(__DIR__),
    'root_dir' => __DIR__,
    'cache_dir' => __DIR__ . '/.thumbnails',
    'exclude' => ['.*', 'index.php', 'Thumbs.db'],
    'auth_enabled' => false,
    'auth_users' => [
        // password as generated by password_hash() or '*' to accept any password.
        // 'user' => '1$1390293029302'
    ],
];

// If this file is named index.php, then config will be index.cfg.php.
$config_file = preg_replace('/\.php\d*$/i', '.cfg.php', __FILE__);
if (file_exists($config_file)) {
    require $config_file;
}

if (!chdir($config['root_dir'])) {
    die('Files path is invalid.');
}

if ($config['auth_enabled']) {
    $users = $config['auth_users'];
    if (isset($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW'])) {
        $hash = $users[$_SERVER['PHP_AUTH_USER']] ?? '';
        $logged_in = $hash === '*' || password_verify($_SERVER['PHP_AUTH_PW'], $hash);
    } else {
        $logged_in = false;
    }
    if (!$logged_in) {
        header('WWW-Authenticate: Basic realm="' . str_replace('"', '', $config['title']) . '"');
        header('HTTP/1.1 401 Unauthorized');
        die('This content is password protected.');
    }
}

@register_shutdown_function(function () use ($config) {
    $max_age = time() - 30 * 86400;
    if (@filemtime($config['cache_dir'] . '/index.html') < $max_age) {
        foreach (glob($config['cache_dir']  . '/*.jpg') as $file) {
            if (filemtime($file) < $max_age)
                @unlink($file);
        }
        @touch($config['cache_dir'] . '/index.html');
    }
});
@set_time_limit(0);

/* Serve file */

if (isset($_GET['preview'])) {
    $filepath = cleanpath($_GET['preview']);
    if ($filepath && file_exists($filepath)) {
        $destpath = $config['cache_dir'] . '/' . md5($filepath) . '.jpg';
        if (!get_thumbnail($filepath, $destpath, 300)) {
            // Should probably store a magic string instead so that the generic icon can be changed easily
            file_put_contents($destpath, BUNDLE_FILE_ICON());
        }
        serve_file($destpath, get_mime_type($destpath), 300);
    }
    serve_asset('file.png', 600);
}
elseif (isset($_GET['view'])) {
    $filepath = cleanpath($_GET['view']);
    if ($filepath && file_exists($filepath)) {
        serve_file($filepath, get_mime_type($filepath));
    }
    http_response_code(404);
    die("Not found");
}
elseif (isset($_GET['asset'])) {
    serve_asset($_GET['asset'], 600);
}

/* User configuration */

$sort_mode =  ($_GET['sm'] ?? '-') === 'mtime' ? 'mtime' : 'name';
$sort_dir = ($_GET['sd'] ?? '-') === 'desc' ? 'desc' : 'asc';
$view_mode = ($_GET['vm'] ?? '-') === 'grid' ? 'grid' : 'list';

/* Perform the query */

$query = cleanpath($_GET['p'] ?? '');
$title = $query;
$files = [];

// if ($query === ':search') {
if ($search = trim($_GET['search'] ?? '')) {
    $title = sprintf('Searching: "%s"', $search);
    $files = array_filter(find_files('.', true), function ($file) use ($search) {
        return stripos(basename($file), $search) !== false;
    });
    $query = '';
}
elseif ($query === ':recent') {
    $title = 'Recent files';
    $files = array_filter(find_files('.', true), 'is_file');
    $sort_mode = 'mtime';
    $sort_dir = 'desc';
}
elseif ($query === ':all') {
    $title = 'All files';
    $files = array_filter(find_files('.', true), 'is_file');
}
elseif ($query === '' || file_exists($query)) {
    $title = $query;
    $files = find_files($query, false);
}
else {
    $title = sprintf('Not found: "%s"', $query);
    $files = [];
    $query = '';
}

$files = array_filter($files, function ($file) use ($config) {
    foreach ($config['exclude'] as $pattern) {
        $_subject = (strpos($pattern, '/') === false) ? basename($file) : $file;
        $_pattern = str_replace(['.', '$', '*'], ['\\.', '\\$', '[^/]*'], $pattern);
        if (preg_match("#^$_pattern$#i", $_subject)) {
            return false;
        }
    }
    return true;
});

if ($sort_mode === 'mtime') {
    usort($files, function ($a, $b) {
        return filemtime($a) - filemtime($b);
    });
} else if ($sort_mode === 'name') {
    natcasesort($files);
}

if ($sort_dir === 'desc') {
    $files = array_reverse($files);
}

if (count($files) > 5000) {
    $files = array_slice($files, 0, 5000);
}

if ($query !== '' && $query[0] !== ':') {
    array_unshift($files, "$query/..");
}

/* Now that we have the file list, check if the user wants an archive rather than a viewer */
if (isset($_GET['dl'])) {
    serve_zip(basename($title ?: $config['title']), $files);
}

/* Build file groups for display */

$total_folders = $total_files = 0;
$file_groups = [];

foreach ($files as $filepath) {
    $filename = basename($filepath);
    $dirname = dirname($filepath);
    $items = &$file_groups[$dirname];
    if (!isset($items)) {
        $items = [[], []];
    }
    $is_dir = is_dir($filepath);
    $details = sprintf("size: %d KB, modified: %s", filesize($filepath) / 1024, date('Y-m-d H:i:s', filemtime($filepath)));
    $items[$is_dir][] = sprintf(
        '<div class="item %s"><a href="%s" title="%s"><div class="preview"><img src="%s" alt="Preview" loading="lazy"></div>'
            . '<div class="label">%s</div></a><div class="details">%s</div></div>',
        $is_dir ? 'folder' : (preg_match('/\.(jpg|jpeg|png|webp|bmp|gif|webm|mp4|mp3|m4a)$/i', $filename) ? 'lightbox' : 'download'),
        htmlentities($is_dir ? get_url($filepath) : '?view=' . urlencode($filepath)),
        htmlentities("$filename\n$details"),
        htmlentities($is_dir ? '?asset=folder.png' : '?preview=' . urlencode($filepath)),
        ($filename === '..') ? '.. <small style="color:#888">[' . htmlentities(basename(dirname($dirname))) . ']</small>' : htmlentities($filename),
        htmlentities($details)
    );
    unset($items);
    if ($is_dir) $total_folders++;
    else $total_files++;
}

$action_links = [
    '<a href="' . get_url($query, ['dl' => 'zip'], []) . '" title="Download an archive of all files listed below">zip</a>',
];

$ui_links = [
    'view: <a href="' . get_url($query, ['vm' => $view_mode === 'list' ? 'grid' : 'list'], []) . '">' . ($view_mode === 'list' ? 'list' : 'grid') . '</a>',
    'sort: <a href="' . get_url($query, ['sm' => $sort_mode === 'name' ? 'mtime' : 'name'], []) . '">' . ($sort_mode === 'name' ? 'name' : 'time') . '</a> '
        . '<a href="' . get_url($query, ['sd' => $sort_dir === 'desc' ? 'asc' : 'desc'], []) . '">' . ($sort_dir === 'desc' ? 'desc' : 'asc') . '</a>',
];

?>
<!DOCTYPE html>
<html>

<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <title><?= htmlentities($config['title'] . ($title ? ": $title" : '')) ?> - alex-album</title>
    <link rel="stylesheet" href="?asset=bundle.css&v=<?= filemtime(__FILE__) ?>" type="text/css">
</head>

<body class="<?= "$view_mode-view" ?>">
    <div id="header">
        <h2><?= navpath($query, $config['title']) . htmlentities($title === $query ? '' : ": $title") ?></h2>
        <small><?= "{$total_folders} folders and {$total_files} files" ?></small>
        <small>[<?= implode(', ', $action_links) ?>]</small>
        <small>(<?= implode(', ', $ui_links) ?>)</small>
    </div>
    <div id="content">
        <?php if (!$total_folders && !$total_files) : ?>
            <strong>Nothing to see!</strong>
        <?php elseif (count($file_groups) > 1) : ?>
            <?php foreach ($file_groups as $path => $items) : ?>
                <div class="container">
                    <details>
                        <summary><?= sprintf('%s (%d items)', navpath($path, $config['title']), count($items[0]) + count($items[1])) ?></summary>
                        <?= implode($items[1]) . implode($items[0]) ?>
                    </details>
                </div>
            <?php endforeach; ?>
        <?php elseif ($items = reset($file_groups)) : ?>
            <div class="container">
                <?= implode($items[1]) . implode($items[0]) ?>
            </div>
        <?php endif; ?>
    </div>
    <div id="footer">
        <form>
            <?php foreach ($_GET as $key => $value) {
                if (!in_array($key, ['search', 'dl', 'p'])) {
                    printf('<input type="hidden" name="%s" value="%s">', $key, $value);
                }
            } ?>
            <input type="text" name="search" placeholder="Search..." value="<?= htmlentities($_GET['search'] ?? '') ?>">
            <button type="submit">Search</button>
            <a href="<?= get_url(':recent') ?>">Recent files</a>
        </form>
        <div>
            alex-album v0.1 (<?= sprintf('Generated in %.02f seconds', microtime(true) - START_TIME) ?>)
        </div>
    </div>
    <script type="text/javascript" src="?asset=bundle.js&v=<?= filemtime(__FILE__) ?>"></script>
</body>

</html>
<?php

function get_thumbnail(string $orig_file, string $dest_file, int $thumb_size = 300)
{
    if (file_exists($dest_file) && filemtime($dest_file) >= filemtime($orig_file)) {
        return true;
    }
    if (!is_dir($dest_folder = dirname($dest_file))) {
        @mkdir($dest_folder, 0755, true) && @touch("$dest_folder/index.html");
    }
    if (filesize($orig_file) < 20 * 1024 * 1024) {
        $original = @imagecreatefromstring(file_get_contents($orig_file));
    }
    if (empty($original)) {
        $commands = ['ffmpeg -ss 10 -i %s -vframes 1 %s', 'ffmpeg -ss 2 -i %s -vframes 1 %s', 'convert %s[0] -flatten jpg:%s'];
        foreach ($commands as $cmd) {
            @unlink($dest_file);
            exec(sprintf($cmd, escapeshellarg($orig_file), escapeshellarg($dest_file)), $null, $out);
            if ($original = @imagecreatefromjpeg($dest_file)) {
                $border_img = @imagecreatefromstring(BUNDLE_MOVIE_STRIP()[1]);
                break;
            }
        }
    }
    if (!empty($original)) {
        $file_width = imagesx($original);
        $file_height = imagesy($original);
        if ($file_width <= $thumb_size && $file_height <= $thumb_size) {
            $thumb_size = max($file_width, $file_height);
        }
        $reduced_width = $reduced_height = $thumb_size;
        if ($file_width > $file_height) {
            $reduced_height *= ($file_height / $file_width);
        } else {
            $reduced_width *= ($file_width / $file_height);
        }
        $reduced_width = round($reduced_width);
        $reduced_height = round($reduced_height);
        $thumbnail = imagecreatetruecolor($reduced_width, $reduced_height);
        imagecopyresampled($thumbnail, $original, 0, 0, 0, 0, $reduced_width, $reduced_height, $file_width, $file_height);
        if (!empty($border_img)) {
            imagecopymerge($thumbnail, $border_img, 0, 0, 0, 0, imagesx($border_img), imagesy($border_img), 100);
            imagecopymerge($thumbnail, $border_img, $reduced_width - imagesx($border_img), 0, 0, 0, imagesx($border_img), imagesy($border_img), 100);
        }
        if (@imagejpeg($thumbnail, $dest_file, 95)) {
            @chmod($dest_file, 0755);
            return true;
        }
    }
    @unlink($dest_file);
    return false;
}

function get_url(string $path, array $args = [], array $remove = ['search', 'dl', 'p'])
{
    $fragments = $args + array_diff_key($_GET, array_flip($remove));
    unset($fragments['p']); // We want p= at the very end, it's easier to read in the url bar
    $fragments['p'] = preg_replace('#/+#', '/', preg_replace('#/?[^/]+/\.\.$#', '', trim($path, '/')));
    return '?' . str_replace('%2F', '/', http_build_query($fragments));
}

function find_files(string $path, bool $recursive = false)
{
    if ($path === '') $path = '.';
    $files = [];
    foreach (scandir($path) as $filename) {
        if ($filename === '.' || $filename === '..')
            continue;
        $filepath = preg_replace('#^[.]*/+#', '', "$path/$filename");
        $files[] = $filepath;
        if ($recursive && is_dir($filepath)) {
            foreach (find_files($filepath, true) as $file) {
                $files[] = $file;
            }
        }
    }
    return $files;
}

function navpath(string $path, string $root_name = 'Home')
{
    $crumbs = [];
    for (; trim($path, '.'); $path = dirname($path)) {
        $crumbs[] = '<a href="' . get_url($path) . '">' . htmlentities(basename($path)) . '</a>';
    }
    $crumbs[] = '<a href="' . get_url('/') . '">' . htmlentities($root_name) . '</a>';
    return implode(' / ', array_reverse($crumbs));
}

function cleanpath(string $path)
{
    $parts = preg_split('#[/\\\\]+#', $path);
    return implode('/', array_filter($parts, function ($part) {
        return str_replace('.', '', $part) !== '';
    }));
}

function get_mime_type(string $filename)
{
    $ext = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
    if (preg_match('/^(jpg|jpeg|png|webp|bmp|gif)$/', $ext)) {
        return "image/$ext";
    } else if (preg_match('/^(wav|mp3|mid|aac|flac|ogg|wma)$/', $ext)) {
        return "audio/$ext";
    } else if (preg_match('/^(mp4|m4v|webm|mkv|wmv|avi|flv|mov)$/', $ext)) {
        return "video/$ext";
    } else if (preg_match('/^(txt|md|nfo)$/', $ext)) {
        return "text/plain";
    }
    return 'application/octet-stream';
}

function serve_asset(string $filename, int $cache_ttl = 300)
{
    $assets = [
        'bundle.css' => 'BUNDLE_CSS',
        'bundle.js' => 'BUNDLE_JS',
        'folder.png' => 'BUNDLE_FOLDER_ICON',
        'file.png' => 'BUNDLE_FILE_ICON',
    ];
    if (isset($assets[$filename])) {
        [$type, $data] = ($assets[$filename])();
    } else {
        http_response_code(404);
        [$type, $data] = ['text/plain', 'Not found'];
    }
    if ($cache_ttl > 0) {
        header('Cache-Control: max-age=' . $cache_ttl);
        header('Pragma: cache');
    }
    header('Cache-Control: max-age=' . $cache_ttl);
    header('Pragma: cache');
    header('Content-Disposition: inline; filename="' . basename($filename) . '"');
    header('Content-Type: ' . $type);
    header('Content-Length: ' . strlen($data));
    echo $data;
    exit;
}

function serve_file(string $filename, string $type = 'application/octet-stream', int $cache_ttl = -1)
{
    /* Taken from https://github.com/pomle/php-serveFilePartial */

    if (!$handle = fopen($filename, 'rb')) {
        http_response_code(file_exists($filename) ? 500 : 404);
        exit;
    }
    $filesize = filesize($filename);

    $byteBegin = 0;
    $byteEnd = $filesize;

    ### Parse Content-Range header for byte offsets, looks like "bytes=11525-" OR "bytes=11525-12451"
    if (isset($_SERVER['HTTP_RANGE']) && preg_match('%bytes=(\d+)-(\d+)?%i', $_SERVER['HTTP_RANGE'], $match)) {
        $byteBegin = (int)$match[1];
        if (isset($match[2])) {
            $finishBytes = (int)$match[2];
            $byteEnd = $finishBytes + 1;
        } else {
            $finishBytes = $filesize - 1;
        }
        header("HTTP/1.1 206 Partial content");
        header(sprintf('Content-Range: bytes %d-%d/%d', $byteBegin, $finishBytes, $filesize));
        fseek($handle, $byteBegin, SEEK_SET);
    }
    $byteLength = $byteEnd - $byteBegin;

    if ($cache_ttl > 0) {
        header('Cache-Control: max-age=' . $cache_ttl);
        header('Pragma: cache');
    }
    header('Content-Disposition: inline; filename="' . basename($filename) . '"');
    header('Content-Length: ' . $byteLength);
    header('Content-Type: ' . $type, true);
    header('Accept-Ranges: bytes', true);

    while ($byteLength > 0) {
        $chunkSize = min(1024 * 1024, $byteLength);
        $byteLength -= $chunkSize;
        echo fread($handle, $chunkSize);
        flush();
    }
    exit;
}

function serve_zip(string $filename, array $files = [])
{
    $filename = addslashes(str_replace([':', '/'], '_', $filename)) . '.zip';
    // Reject absolute paths and parents, just in case one slipped in
    $files = array_filter($files, function ($file) {
        return $file[0] !== '/' && strpos($file, '..') === false;
    });
    header('Content-Disposition: attachment; filename="' . $filename . '"');
    // header('Content-Length: ' . $total_size);
    header('Content-Type: application/zip', true);
    passthru('zip -0 -r - ' . implode(' ', array_map('escapeshellarg', $files)));
    exit;
}

function BUNDLE_CSS()
{
    return ['text/css', <<<'EOF'
    body    { background: #222222; font-family:Arial,Helvetica,sans-serif; padding: 0 5em; margin: 0;}
    h1, h2  { margin: 0; }
    a       { color: #FF8600; text-decoration:none; }
    a:hover { text-decoration:underline; }
    .item       { margin: 5px; padding: 5px; width: 210px; height: 220px; border: 1px solid #999; border-radius:0.5em; display:inline-block; position:relative; }
    .item:hover, .item.recent:hover { background: #A0A0A0; }
    .item.recent { background: #FF860020; border: 1px solid #FF8600; }
    .item.folder .label { font-weight: bold; }
    .item img { max-height: 98%; max-width: 98%; border-radius:0.5em; vertical-align: bottom;}
    .item a   { color: inherit; text-decoration: none; }
    .item .preview { margin: 0 auto; width: 90%; height: 92%; }
    .item .label { text-overflow: ellipsis; overflow: hidden; white-space: nowrap; font-size: .9em; text-align: center; }
    .item .details { display: none; }
    .list-view .item {width: auto; height: 40px; display: block; font-size: 1em; }
    .list-view .item .preview { width:60px; height: 100%; float: left; }
    .list-view .item .label   { display: block; margin: 10px; width: calc(52% - 30px); height: 80%; font-size: 1em; float: left; text-align: left; }
    .list-view .item .details { display: block; margin: 10px 0px; width: calc(38% - 30px); height: 80%; font-size: 0.9em; float: left; text-align: left; }
    #header, #footer { font-size: 90%; text-align:center; margin: 1em; color:#ddd; }
    #content { margin: 0 auto;  max-width: 1180px; border: 1px solid #000000; background:#E0E0E0; padding:10px; border-radius:0.5em; text-align: center;}
    #content .container + .container { margin-top: 1em; padding-top:1em; border-top: 2px dashed #BBB;}
    #footer form { margin: 1em; }
    @media only screen and (min-device-width : 320px) and (max-device-width : 640px) {
        body { padding: 0; font-size: 150%;}
        #header,#content,#footer { zoom: 200%;}
    }
    details > summary {list-style: none; color: #888; cursor: pointer;}
    summary::after {content: ' ►';}
    details[open] summary:after {content: ' ▼';}

    /** https://github.com/dbrekalo/simpleLightbox **/
    .slbOverlay,.slbWrapOuter,.slbWrap{position:fixed;top:0;right:0;bottom:0;left:0}.slbOverlay{overflow:hidden;z-index:2000;background-color:#000;opacity:0.7;-webkit-animation:slbOverlay 0.5s;-moz-animation:slbOverlay 0.5s;animation:slbOverlay 0.5s}.slbWrapOuter{overflow-x:hidden;overflow-y:auto;z-index:2010}.slbWrap{position:absolute;text-align:center}.slbWrap:before{content:"";display:inline-block;height:100%;vertical-align:middle}.slbContentOuter{position:relative;display:inline-block;vertical-align:middle;margin:0px auto;padding:0 1em;box-sizing:border-box;z-index:2020;text-align:left;max-width:90%}.slbContentEl .slbContentOuter{padding:5em 1em}.slbContent{position:relative}
    .slbContentEl .slbContent{-webkit-animation:slbEnter 0.3s;-moz-animation:slbEnter 0.3s;animation:slbEnter 0.3s;background-color:#fff;box-shadow:0 0.2em 1em rgba(0,0,0,0.4)}.slbImageWrap{-webkit-animation:slbEnter 0.3s;-moz-animation:slbEnter 0.3s;animation:slbEnter 0.3s;position:relative}.slbImageWrap:after{content:"";position:absolute;left:0;right:0;top:5em;bottom:5em;display:block;z-index:-1;box-shadow:0 0.2em 1em rgba(0,0,0,0.6);background-color:#FFF}.slbDirectionNext .slbImageWrap{-webkit-animation:slbEnterNext 0.4s;-moz-animation:slbEnterNext 0.4s;animation:slbEnterNext 0.4s} .slbIframeCont .slbCaption{bottom:-2.5em;}
    .slbDirectionPrev .slbImageWrap{-webkit-animation:slbEnterPrev 0.4s;-moz-animation:slbEnterPrev 0.4s;animation:slbEnterPrev 0.4s}.slbImage{width:auto;max-width:100%;height:auto;display:block;line-height:0;box-sizing:border-box;padding:3em 0;margin:0 auto}.slbCaption{display:inline-block;max-width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;word-wrap:normal;font-size:1.2em;position:absolute;left:0;right:0;bottom:0;padding:.71429em 0;color:#fff;color:rgba(255,255,255,0.7);text-align:center}.slbCloseBtn,.slbArrow{margin:0;padding:0;border:0;cursor:pointer;background:none}
    .slbCloseBtn::-moz-focus-inner,.slbArrow::-moz-focus-inner{padding:0;border:0}.slbCloseBtn:hover,.slbArrow:hover{opacity:0.5}.slbCloseBtn:active,.slbArrow:active{opacity:0.8}.slbCloseBtn{-webkit-animation:slbEnter 0.3s;-moz-animation:slbEnter 0.3s;animation:slbEnter 0.3s;font-size:3em;width:1.66667em;height:1.66667em;line-height:1.66667em;position:absolute;right:-.9em;top:-.6em;color:#fff;color:rgba(255,255,255,0.7);text-align:center}.slbLoading .slbCloseBtn{display:none}.slbLoadingText{font-size:1.4em;color:#fff;color:rgba(255,255,255,0.9)}.slbArrows{position:fixed;top:50%;left:0;right:0}
    .slbLoading .slbArrows{display:none}.slbArrow{position:absolute;top:50%;margin-top:-5em;width:8em;height:10em;opacity:0.7;text-indent:-999em;overflow:hidden}.slbArrow:before{content:"";position:absolute;top:50%;left:50%;margin:-.8em 0 0 -.8em;border:.8em solid transparent;scale:2}.slbArrow.next{right:0}.slbArrow.next:before{border-left-color:#fff}.slbArrow.prev{left:0}.slbArrow.prev:before{border-right-color:#fff}.slbIframeCont{width:80vw;height:0;overflow:hidden;padding-top:50%;margin:2em 0}.slbIframe{position:absolute;top:0;left:0;width:100%;height:100%;box-shadow:0 0.2em 1em rgba(0,0,0,0.6);background:#000}
    @-webkit-keyframes slbOverlay{from{opacity:0}to{opacity:0.7}}@-moz-keyframes slbOverlay{from{opacity:0}to{opacity:0.7}}@keyframes slbOverlay{from{opacity:0}to{opacity:0.7}}
    @-webkit-keyframes slbEnter{from{opacity:0;-webkit-transform:translate3d(0, -1em, 0)}to{opacity:1;-webkit-transform:translate3d(0, 0, 0)}}@-moz-keyframes slbEnter{from{opacity:0;-moz-transform:translate3d(0, -1em, 0)}to{opacity:1;-moz-transform:translate3d(0, 0, 0)}}@keyframes slbEnter{from{opacity:0;-webkit-transform:translate3d(0, -1em, 0);-moz-transform:translate3d(0, -1em, 0);-ms-transform:translate3d(0, -1em, 0);-o-transform:translate3d(0, -1em, 0);transform:translate3d(0, -1em, 0)}to{opacity:1;-webkit-transform:translate3d(0, 0, 0);-moz-transform:translate3d(0, 0, 0);-ms-transform:translate3d(0, 0, 0);-o-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}
    @-webkit-keyframes slbEnterNext{from{opacity:0;-webkit-transform:translate3d(4em, 0, 0)}to{opacity:1;-webkit-transform:translate3d(0, 0, 0)}}@-moz-keyframes slbEnterNext{from{opacity:0;-moz-transform:translate3d(4em, 0, 0)}to{opacity:1;-moz-transform:translate3d(0, 0, 0)}}@keyframes slbEnterNext{from{opacity:0;-webkit-transform:translate3d(4em, 0, 0);-moz-transform:translate3d(4em, 0, 0);-ms-transform:translate3d(4em, 0, 0);-o-transform:translate3d(4em, 0, 0);transform:translate3d(4em, 0, 0)}to{opacity:1;-webkit-transform:translate3d(0, 0, 0);-moz-transform:translate3d(0, 0, 0);-ms-transform:translate3d(0, 0, 0);-o-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}
    @-webkit-keyframes slbEnterPrev{from{opacity:0;-webkit-transform:translate3d(-4em, 0, 0)}to{opacity:1;-webkit-transform:translate3d(0, 0, 0)}}@-moz-keyframes slbEnterPrev{from{opacity:0;-moz-transform:translate3d(-4em, 0, 0)}to{opacity:1;-moz-transform:translate3d(0, 0, 0)}}@keyframes slbEnterPrev{from{opacity:0;-webkit-transform:translate3d(-4em, 0, 0);-moz-transform:translate3d(-4em, 0, 0);-ms-transform:translate3d(-4em, 0, 0);-o-transform:translate3d(-4em, 0, 0);transform:translate3d(-4em, 0, 0)}to{opacity:1;-webkit-transform:translate3d(0, 0, 0);-moz-transform:translate3d(0, 0, 0);-ms-transform:translate3d(0, 0, 0);-o-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}
    EOF];
}

function BUNDLE_JS()
{
    return ['text/javascript', <<<'EOF'
    /** https://github.com/dbrekalo/simpleLightbox **/
    !function(t,e){"function"==typeof define&&define.amd?define([],e):"object"==typeof module&&module.exports?module.exports=e():t.SimpleLightbox=e()}(this,function(){function e(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];if(n)for(var i in n)n.hasOwnProperty(i)&&(t[i]=n[i])}return t}function i(t,e){t&&e&&(t.className+=" "+e)}function s(t,e){t&&e&&(t.className=t.className.replace(new RegExp("(\\s|^)"+e+"(\\s|$)")," ").trim())}function o(t){var e=document.createElement("div");return e.innerHTML=t.trim(),e.childNodes[0]}function l(t,e){return(t.matches||t.matchesSelector||t.msMatchesSelector).call(t,e)}function r(t){this.init.apply(this,arguments)}
    return r.defaults={elementClass:"",elementLoadingClass:"slbLoading",htmlClass:"slbActive",closeBtnClass:"",nextBtnClass:"",prevBtnClass:"",loadingTextClass:"",closeBtnCaption:"Close",nextBtnCaption:"Next",prevBtnCaption:"Previous",loadingCaption:"Loading...",bindToItems:!0,closeOnOverlayClick:!0,closeOnEscapeKey:!0,nextOnImageClick:!0,showCaptions:!0,captionAttribute:"title",urlAttribute:"href",startAt:0,loadingTimeout:100,appendTarget:"body",beforeSetContent:null,beforeClose:null,afterClose:null,beforeDestroy:null,afterDestroy:null,videoRegex:new RegExp(/youtube.com|vimeo.com/)},e(r.prototype,{init:function(n){n=this.options=e({},r.defaults,n);var t,
    i=this;n.$items&&(t=n.$items.get()),n.elements&&(t=[].slice.call("string"==typeof n.elements?document.querySelectorAll(n.elements):n.elements)),this.eventRegistry={lightbox:[],thumbnails:[]},this.items=[],this.captions=[],t&&t.forEach(function(t,e){i.items.push(t.getAttribute(n.urlAttribute)),i.captions.push(t.getAttribute(n.captionAttribute)),n.bindToItems&&i.addEvent(t,"click",function(t){t.preventDefault(),i.showPosition(e)},"thumbnails")}),n.items&&(this.items=n.items),n.captions&&(this.captions=n.captions)},addEvent:function(t,e,n,i){return this.eventRegistry[i||"lightbox"].push({element:t,eventName:e,callback:n}),t.addEventListener(e,n),this},
    removeEvents:function(t){return this.eventRegistry[t].forEach(function(t){t.element.removeEventListener(t.eventName,t.callback)}),this.eventRegistry[t]=[],this},next:function(){return this.showPosition(this.currentPosition+1)},prev:function(){return this.showPosition(this.currentPosition-1)},normalizePosition:function(t){return t>=this.items.length?t=0:t<0&&(t=this.items.length-1),t},showPosition:function(t){var e=this.normalizePosition(t);return void 0!==this.currentPosition&&(this.direction=e>this.currentPosition?"next":"prev"),this.currentPosition=e,this.setupLightboxHtml().prepareItem(this.currentPosition,this.setContent).show()},loading:function(t){
    var e=this,n=this.options;t?this.loadingTimeout=setTimeout(function(){i(e.$el,n.elementLoadingClass),e.$content.innerHTML='<p class="slbLoadingText '+n.loadingTextClass+'">'+n.loadingCaption+"</p>",e.show()},n.loadingTimeout):(s(this.$el,n.elementLoadingClass),clearTimeout(this.loadingTimeout))},prepareItem:function(t,e){var n=this,i=this.items[t];if(this.loading(!0),this.options.videoRegex.test(i))e.call(n,s=o('<div class="slbIframeCont"><iframe class="slbIframe" frameborder="0" allowfullscreen src="'+i+'"></iframe></div>')),this.options.showCaptions&&this.captions[t]&&s.appendChild(o('<div class="slbCaption">'+this.captions[t]+"</div>"));else{var s=o('<div class="slbImageWrap"><img class="slbImage" src="'+i+'" /></div>');this.$currentImage=s.querySelector(".slbImage"),
    this.options.showCaptions&&this.captions[t]&&s.appendChild(o('<div class="slbCaption">'+this.captions[t]+"</div>")),this.loadImage(i,function(){n.setImageDimensions(),e.call(n,s),n.loadImage(n.items[n.normalizePosition(n.currentPosition+1)])})}return this},loadImage:function(t,e){if(!this.options.videoRegex.test(t)){var n=new Image;e&&(n.onload=e),n.src=t}},setupLightboxHtml:function(){var t=this.options;return this.$el||(this.$el=o('<div class="slbElement '+t.elementClass+'"><div class="slbOverlay"></div><div class="slbWrapOuter"><div class="slbWrap"><div class="slbContentOuter"><div class="slbContent"></div><button type="button" title="'+t.closeBtnCaption+
    '" class="slbCloseBtn '+t.closeBtnClass+'">×</button>'+(1<this.items.length?'<div class="slbArrows"><button type="button" title="'+t.prevBtnCaption+'" class="prev slbArrow'+t.prevBtnClass+'">'+t.prevBtnCaption+'</button><button type="button" title="'+t.nextBtnCaption+'" class="next slbArrow'+t.nextBtnClass+'">'+t.nextBtnCaption+"</button></div>":"")+"</div></div></div></div>"),this.$content=this.$el.querySelector(".slbContent")),this.$content.innerHTML="",this},show:function(){return this.modalInDom||(document.querySelector(this.options.appendTarget).appendChild(this.$el),i(document.documentElement,this.options.htmlClass),this.setupLightboxEvents(),
    this.modalInDom=!0),this},setContent:function(t){var e="string"==typeof t?o(t):t;return this.loading(!1),this.setupLightboxHtml(),s(this.$content,"slbDirectionNext"),s(this.$content,"slbDirectionPrev"),this.direction&&i(this.$content,"next"===this.direction?"slbDirectionNext":"slbDirectionPrev"),this.options.beforeSetContent&&this.options.beforeSetContent(e,this),this.$content.appendChild(e),this},setImageDimensions:function(){this.$currentImage&&(this.$currentImage.style.maxHeight=("innerHeight"in window?window.innerHeight:document.documentElement.offsetHeight)+"px")},setupLightboxEvents:function(){var n=this;return this.eventRegistry.lightbox.length||
    this.addEvent(this.$el,"click",function(t){var e=t.target;l(e,".slbCloseBtn")||n.options.closeOnOverlayClick&&l(e,".slbWrap")?n.close():l(e,".slbArrow")?l(e,".next")?n.next():n.prev():n.options.nextOnImageClick&&1<n.items.length&&l(e,".slbImage")&&n.next()}).addEvent(document,"keyup",function(t){n.options.closeOnEscapeKey&&27===t.keyCode&&n.close(),1<n.items.length&&((39===t.keyCode||68===t.keyCode)&&n.next(),(37===t.keyCode||65===t.keyCode)&&n.prev())}).addEvent(window,"resize",function(){n.setImageDimensions()}),this},close:function(){this.modalInDom&&(this.runHook("beforeClose"),this.removeEvents("lightbox"),this.$el&&this.$el.parentNode.removeChild(
    this.$el),s(document.documentElement,this.options.htmlClass),this.modalInDom=!1,this.runHook("afterClose")),this.direction=void 0,this.currentPosition=this.options.startAt},destroy:function(){this.close(),this.runHook("beforeDestroy"),this.removeEvents("thumbnails"),this.runHook("afterDestroy")},runHook:function(t){this.options[t]&&this.options[t](this)}}),r.open=function(t){var e=new r(t);return t.content?e.setContent(t.content).show():e.showPosition(e.options.startAt)},r.registerAsJqueryPlugin=function(i){i.fn.simpleLightbox=function(t){var e,n=this;return this.each(function(){i.data(this,"simpleLightbox")||(e=e||new r(i.extend({},t,{$items:n})),
    i.data(this,"simpleLightbox",e))})},i.SimpleLightbox=r},"undefined"!=typeof window&&window.jQuery&&r.registerAsJqueryPlugin(window.jQuery),r});

    let lightbox = new SimpleLightbox({
        closeOnEscapeKey: true,
        elements: '.item.lightbox > a',
        videoRegex: new RegExp(/(mp4|m4v|mkv|webm|mp3|m4a)$/i),
        beforeClose: function(event) {
            let url = lightbox.items[lightbox.currentPosition];
            let sel = document.querySelector('[href="' + url + '"]');
            for (let el of document.querySelectorAll('.item')) {
                el.classList.remove('recent');
            }
            sel.parentElement.scrollIntoView({block: "nearest"});
            sel.parentElement.classList.add('recent');
        },
    });
    EOF];
}

function BUNDLE_MOVIE_STRIP()
{
    return ['image/png', base64_decode(<<<'EOF'
    iVBORw0KGgoAAAANSUhEUgAAABYAAAH9BAMAAADsbpH9AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAwUExURRYWFgAAACQkJD9AQE9QT19g
    YHV2dn+Af46Pj56goK6ur7+/wMzMzN/g4Obm5v///0pmw/0AAAAJcEhZcwAADsEAAA7BAbiRa+0AAAHlSURBVFjD7ZgxS8NAFMdtHHQR7yqIgkibD6B0
    UVwUP4JrHcRdcBHqIOiiZtOxFsTVTq6CGXS1EfEDWOsHsNa2Gk0GNe8d5tV6Uqhp6pFMv4aU3vv1f+8e6eH+FRRvmJZ1mQKeffeuKjAgchz5zWOG7JD7
    TSyeccl9t9XvCq7BGlaBn4D7br1rITgPnWRd03U9BjwANd4AnwBXiP+axI/bgsNfn+eUH+HDM/AdycA48D0wm84axjZXw386l8tl0f8k1Fj6XrvIqi1x
    2LZ/uqcaMr9JMj9cLJbLD8tKOGefidcTyGNQ4znwEckbeniR+HECYPpbsO8Y5gHXwxZN0zxNqOF/Zt0wdjDzg6Re3Pu0z78G5fyH/l+H+3v+evgILEj0
    eU37yky3+WyFIfOiz/dDjRfAWG+V+K8HnHNH8v/iGuZ85vFD68oqpJTIvDa1m8ms0T6PZ9k1qR092J3wL/obnrN41qPzUZINlvAyw/+vf2+0EXu2F+ra
    As/Y5yvESa2DziHzDbPNEuGhM9MqFOaVyLyM2Yo/50+Q/Df3/2jO/zOO5vxwM58+yOePYyTzJYlzOyj/sjmf4ZyP/nHO31fDuXd8JZG7eM5veNfBYc5P
    quE/mvPDyXw054fG0ZwfAkdzfjvM+QfRaCE47TimkwAAAABJRU5ErkJggg==
    EOF)];
}

function BUNDLE_FILE_ICON()
{
    return ['image/png', base64_decode(<<<'EOF'
    UklGRgIOAABXRUJQVlA4WAoAAAAYAAAA/wAA9QAAQUxQSGkAAAABDzD/ERHCaSNJkrR/wzGhTWnTxuWDx5qdFDr2R/R/ApY3yXs/nKzYZO1WtrNgyYpN
    1m5lOws2WLJik7Vb2c6CDZas2GTtVrazYIMlK9ZufbqdBUtWbLJ2K9tZsMGSFZus//57Mbixd04AVlA4IJIMAACwUACdASoAAfYAPgkCgUCBPQBgEJ6W
    6+cL4CrXYz/ADw25V5ePxk/BjyUiRcSLvqxi+gflV/bvqJ5yPMK/sf8A9+vOA/gH8b9arpAP0o9Z/1ovQU/W71uf+37Qf7O+wX/KP6T9/+vIS0PSfda/
    XTzjfvuDcZv2XU7HTpwS/46Ms/cG/kn80/2/qAeYB7AH7RiVvklqSSz6tXsHitXBfAVFsLEmaEUaj0/Fmxf8Uln1YIipBQWlZJAbTIEIgVWkUcUnQcNT
    lxfI7FEyMVTinlLelMAOu7VwuyMwcvknMRfb6RNC+JyjQIySXyPknh5pZTIj2j0BlLei4cFkoTZiXxQALogu8VAt3UyOl2KQ1W27qt3q0J9B0VMvxqPj
    6S995OQ1NnpyRlMc5ezKOhukyTXEq1SaqWc6Ozs8J4DfvF0VY/NUhsCGqwYIBMs42LD9MoE9b0D5EybVAcu0pbB2h5T5jU04OQ34HOGOnyXuZpWENOLj
    BoqygyX0SJkalauyEnxqHqcPjsym/xBDzCP3x8On2aP93KMSWeUlmP37+Z5JUo0pAJdTozKxPLG/cwP9RAmGa/YsszhtOpj45XctuSeCOFjvBLM8nxNO
    k7olFGxBom7TR+4qnv539pUmZOVtXZ/GROQru9dK3slUCMqchTwRwY3GnU3tdZ3AFe8wq4CX93oZwBA93kl+STpAL722mudZltYcNL1exQUFu4dYXtnL
    VSlKaUs1sDycHRqwM8HthmKk1CqvHNcgFy/Z+lBdXeUYzx7f4dD2MFm9mJ0be/O/lgYiHVXHB0Auk+5p8Om0LSdoQOGhuJ5cc4YOTMHPRo2z2v8i/GcD
    arprUjiEXBRLGFi4J3K1e4aK9w0V7AAA/v/yZyAAARX//0vT6Y10vyv4od+n88tX2nf+dZp8xtUWyD7Wao9X59Sb/8qiSCByZzTq/iHH0/8DEGpdGCOA
    J2GQ3zszbVbvsT6kocRE+ig2fgP4mD+dX7E9W1AKoNJj5/gOMaH/oaonvAYBn51QZhA4ypVFefuE+APx0JU65D+rxv4Br2JtZQ8uQSS8xUaafr7o2RNS
    FY4NEG6ZjDLN3bLzEQ8coDNiCrW6v//e4yHQJLz8NoFqhef0ESwTHhRokP3iaB4q8sIXATtVKmID4VOFrZaH2q7XezHAaAAyH6A+bTP9jJmxYnx+18AW
    FwtjJetHoNzmSPm0mgbmw00KFAZyvi9JsEYKn0eFa8+oS6OE1drrE/xPtUerJ/I07LS4XdhRNdQDP/1EhQXJ/TsalG7tx3SI6vJ34xYuynhtvYglscZP
    UNuMvP6RiPeTeQqtBwqjA1rPViiXnTK+aojeWemHeh0EtYy1fRjzP5gX7TkBfsvcZWYs6vvp63KuUv+PZ0l8TojfvdPjhNGXkdgkTUhWODRCybh1aEHw
    WxasRvPUk7EiX4Iel0RWZZxjDRUD9PYie4tcVstZIuSuVdHOhM5O9J8uDfZ7Qpkr1tcyK3Z4K4Mbcyr/GeMnh+KARtbjrtm1nlocKKKmSRDxUwNEuK4o
    +vEAsc3QxeRNV9mk6bvCuG6+l8rkVAdfkIg3z6vZC9O3BwUrTRVWtRp9Tkq4khu+Uc6LEfqEz4VAJjyVpaW+pp4WSbzvHe6fHDek5wtuiCdeZWpf2ZTg
    Louf23/1kffxsqCpk6QlyPxPiE4XkfOVcnWWf7JR0W+Yn8nrhzZD4kU6QfLvqlzA4wqHIIRlr/KGKGuozC/xeXyawoc+307mX6MK4IKlYL0OcVM5f6LO
    +ZVHSeh8CmOb+9AbkxX2a+2pp4YL+KILOWO/eLALKeRK4W2kxSeiEEwYPBow/WC28ZL8z7KKhwEIOnvNcatKK5iG1J6gwP+ErswmJQd1uc8ZyjEPOXTf
    +u9Le7pzfjA5vcurFn6GEOFkA1/bA5T+TFN+u8tEab9wxMhRY6KQaOXY430fhFaspqP3u2ykfr8ucw28CGIQI40rqUWAI/4z1bYVJNfFq0oQGIW2cejL
    Bg1Km0iw9Jm5u2z297r/5C3+9kF3c9ZUCijooaI2jUa+wnYqtq7qfifnfEFX9o1TjyK+7MUiOt2Ssn9XB/gBnCE/BehxbCgAle8bG9qG55gjdcD+nGgH
    oGDY/a1FjQsOrFH9/kNXp4hjtO+4M010t2/itCUwGZrsggyZA0an0veFh1XxZKweeqqLKbWn/RFAk1df32xFNVLb6FTPKsq2gM+3Wc+/L6LygtNXUOG2
    5HT6FgvxLk5fpkQgfhhinrT+/8gETScBXS01speH7T+I+r9A05rwu+dYQTgtP7H6xsF3jzR1enauBej6o8F3zy09VW4DEpQcbDjO/cbXn5XA2yU5WIpH
    xHPMkzR3ar4awDa3x6jvvbQXS2Rip4BmE8wjaJqdUEulfPPuBrcaU0sXQMkjEVooch9y96NMdQ3LgVYoA7UWx+RFfkCI8C7gGxWQIKunnz2lBmBX4EVM
    EIxHVRnVDFDCDVt7oNKWzPMgjqJDklyNcm9gpahZsWKOVJ9WOSDyIftCAdplzYNRFM7keic4CkJ0gAb8yEqDsV9wr80pNG+p/GsdYhOTSXw+nY5EYpCN
    +IWyF4v34gi5sopb5WEv6CpQvFbRS3Z/dx1Fee1tviAy5OLHp1BHugSuio7jy63ydY0+AW+NSzen0YRXdjLb2OSKrbygSVlfM10hP/DKT2K2XgkAUY6Y
    VoHzXBeNzDfudykL945sl9pigSc6WiWMdgsxdHEk0/gMbmmA4jzMIJy03O6/8CRkmQZIUJ2F+2ijtT+2FsXTBiaUg5TPWi/OEW4defbL7dTrcBcTE9WL
    5GoQpLr0QH7sUvjAoRJy8QUTY1pcPuiXUOlj45ikYB2N1gDv2FMS3ue1/PRFnLidSEj/vNx8TYc2d5XfWacKC3dilWqx8ri3oq4RrB7YM2B//eZEySg4
    qYjWOpmk9svEVqXGJNFnTGsSJWIcW+IWxEEk09c6bQocYsKXT1ViexcwkDCOhTbENcwC20OmsfqYVSbeXLDosqfw0+d3maCV3Vl6uJTbbENQwu/Bvcrp
    VLoFoano0sx8HdNhiJvY15lB9MLRWepevO1ClFutxHapj8saEsrzeiYomB7rtCS6bkt4+9Zbd3WeNl0ECsCcOVQR7heuE/WihwYxUSADO+5YyQoZl5DL
    9bkWAF4PoUBSNVYkN3IJGWEtRbjzf4GoSFZbGBZmd2BYgPTTM3i86fLDAMB7yYOQmdNEJQ6BiCjT/7xqKS11ca0nrUkkyzBrchvFb7GN6O0YZmpSTDTa
    hDqmcs9HfbWOURMCx995ixASVtUBAu1UZQJ8xo4afeDwhzshS3Z/KrVhcHrvf/twmJB13P/94rcoLBaBCwkepm9MECBtUaD8UCv6Nc6oArn7I4oyTPaG
    oBD6SyEJuX1TOFHTyX/oAJYNbqAQgSAsTGI2C0IbxyWsYsfkFfCNXtwBj3wyXNSh7w/3igpOJmihEzmdP7yekbVqpNJfmp3PZJsytsIgPl1IVCH84qu0
    nDNtle54Q4n6C4FDDkI/IhyFrqA2Ijj3rg8xoLTbjdEkRHxip/Gck4G99vDuFFhwuMxzFG+yC6tWSEoK97ec1O30QKzAkS1m6ddxPp+h4YfxmH9Q/eUR
    iGELkSqe448qE9eBjPR7NhTZKsFpB7Mp79NBF5kgJkXTKSjjv0hOBJ8HUi329NpIzFsV6f+5WMhz8lKpcQIa+CLZnF5vjhHnOfJEEzDsFzwqGGhr7Z7C
    54wSgws+NXlItDg/jD9VT6AASSd8K86tFi7C5rsn+kXLvdu9nkqgRBXSwHX7joIyoRtB0K3NWiozNh0QvmIkdDNnWUmjwx5e1x8iMHRfkf5alqDBH5o+
    Kpk9+M+0wxDUgufSycZCq1GZnEyFop6VW7PDErwa6Ym3vRZ/U4cmKotBDQ1Ea62bvwrGKRwa3vmssc2SW0sn1eTO7hj0SoY91Saol21Njt9lPDnYct7W
    ELeBLaSFn/uBievtQFJdrq2BlDsTY7DesiWGJcO1ceSfUgXmH0lJEwBxXX8SZyztDangDP+OS52X/udveN0/2a0OKmnA7+OKlozsbUOaLt7tqafLsO/L
    /9w6X/7URlcaL8nxO3H9n+VftCbDlIxaQ//+jtX/6pnHm0n4nlgYiFwUPIyjvb5KTYPu8gShdaO+EUa3F6iy7/74bB5MFlNyf3Tz8aGMdH7ty2ehC7NH
    DPOmurGBmeKlRASNNumsxBSYfA8xkT4Ya/yne6pNXg4/oGFgenBlNyhZUGH4MU+K7T72o/foAAAAAAAAAAAAAEVYSUbYAAAASUkqAAgAAAAGABIBAwAB
    AAAAAQAAABoBBQABAAAAVgAAABsBBQABAAAAXgAAACgBAwABAAAAAgAAADEBAgARAAAAZgAAAGmHBAABAAAAeAAAAAAAAADjGAEA6AMAAOMYAQDoAwAA
    cGFpbnQubmV0IDQuMy4xMQAABQAAkAcABAAAADAyMzABoAMAAQAAAAEAAAACoAQAAQAAAAABAAADoAQAAQAAAPYAAAAFoAQAAQAAALoAAAAAAAAAAgAB
    AAIABAAAAFI5OAACAAcABAAAADAxMDAAAAAA
    EOF)];
}

function BUNDLE_FOLDER_ICON()
{
    return ['image/png', base64_decode(<<<'EOF'
    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
    EOF)];
}
